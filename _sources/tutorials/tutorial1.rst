.. _tutorial-1:

1. Running a pre-defined set 
============================

This tutorial will describe how to run the model with a default set of parameters and create some simple plots from the output data. 

1.1 First run
-------------

To run the program, open the command prompt and change the directory ``cd`` to that of the executable file ``gdsimsapp``. Then, run the application. This step will look different depending on your operating system. For example, on Windows:

.. code-block:: bash

    cd C:\Users\MyUser\Projects\GeneralMetapop\build
    gdsimsapp.exe

This will display the command-line interface:

.. image:: ../images/tut1_CLI.png
    :scale: 80 %

The interface provides default sets of parameters to demonstrate specific behaviours. Let's try running set 1. 

Upon entering ``1``, the program will give us a preview of the set 1 parameters (the full explanation of parameters can be found in :doc:`../api/struct_input_params` - we will introduce some of these in the following tutorials). Since we're happy with these parameters, we can enter ``y`` to run the program.

.. image:: ../images/tut1_set1.png
    :scale: 80 %

This will run the simulation, displaying some data to show how the simulation is progressing:

.. image:: ../images/tut1_output.png
    :scale: 80 %

On the first column we have the simulation day. This will run up to 1000 days, since we have chosen ``max_t`` = 1000. The following four columns display the total number of juvenile mosquitoes (J), male mosquitoes (M), virgin (unmated) females (V) and (mated) females (F). 

Since this set includes two repetitions (``num_runs`` = 2), the days will restart upon the second repetition.

At the end of the simulation we'll be able to see the program runtime.

Looking at the output data
^^^^^^^^^^^^^^^^^^^^^^^^^^

The program run will have created a new subdirectory in our ``build`` directory called ``output_files``. This contains all the output files generated by the program. There are text files of three types:

- CoordinateList.txt: contains the (x, y) coordinates of all the patches in the simulation (in our set 1 we used ``num_pat`` = 50).
- Totals.txt: contains the total male mosquito numbers across all patches as simulation time passes. These are divided into the different genotypes available (more information on genotypes in Tutorial :ref:`tutorial-3.2`).
- LocalData.txt: contains the male mosquito numbers, divided by genotype, at each patch over time.

The program will generate a set of these files for each repetition (also called run).

.. _tutorial-1.2:

1.2 Simple plots: coordinates and totals (optional - python)
------------------------------------------------------------

The output files we have obtained can be plotted in various ways. Let's look at how to make some simple plots on Python. Feel free to skip this vignette if you'd like to use a different language.

The ``test`` directory you cloned from GitHub will contain a plotting script called ``GeneralMetapopPlots.py`` with the code for these examples.

.. admonition:: Required installations for this tutorial

   - python (and a suitable IDE)
   - :py:mod:`numpy` package
   - :py:mod:`matplotlib` package


Plotting the coordinates
^^^^^^^^^^^^^^^^^^^^^^^^

The following code will plot the patch coordinates for run 1 of the set we just ran. Make sure to have your directory set to ``output_files``.

.. code-block:: python
    :caption: test/GeneralMetapopPlots.py - 'Plot coordinates of patches'

    import numpy as np
    import matplotlib.pyplot as plt

    # extract data from the file
    coords = np.loadtxt("CoordinateList1run1.txt", skiprows=2) 

    x = coords[:, 1] # second column
    y = coords[:, 2] # third column

    plt.figure()
    plt.title("Patch locations")
    plt.xlabel("x (km)")
    plt.ylabel("y (km)")
    plt.scatter(x, y, marker='.')


Notice how we skip the first two rows of the table containing the header labels. We also ignore the first column since it only contains the patch index numbers.

This script will generate the following plot:

.. image:: ../images/tut1_coords_plot.png
    :scale: 80 %

Now we can see the spatial distribution of the patches!


Plotting total males over time
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following code will plot the total male mosquito numbers for the first run of set 1.
We can plot several lines corresponding to the different genotypes so we can observe the changes in genotypic composition over time. 

.. code-block:: python
    :caption: test/GeneralMetapopPlots.py - 'Plot global output (totals) from model'

    import numpy as np
    import matplotlib.pyplot as plt

    # extract data from the file
    totals = np.loadtxt("Totals1run1.txt", skiprows=2)
    times = totals[:, 0]
    total_males = totals[:, 1:]

    plt.figure()
    plt.title("Total males across the area")
    plt.xlabel("Day")
    plt.ylabel("Total number of individuals")
    plt.plot(times, total_males[:, 0], label="$M_{WW}$")
    plt.plot(times, total_males[:, 1], label="$M_{WD}$")
    plt.plot(times, total_males[:, 2], label="$M_{DD}$")
    plt.plot(times, total_males[:, 3], label="$M_{WR}$")
    plt.plot(times, total_males[:, 4], label="$M_{RR}$")
    plt.plot(times, total_males[:, 5], label="$M_{DR}$")


As before, make sure to skip the first two rows of the table.

This script will generate the following plot:

.. image:: ../images/tut1_totals_plot.png
    :scale: 80 %

We can now clearly see how the composition of the overall mosquito population evolves over time!

